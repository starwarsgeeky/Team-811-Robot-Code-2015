// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc811.RobotCode2015.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.omg.CORBA.TIMEOUT;
import org.usfirst.frc811.RobotCode2015.Config;
import org.usfirst.frc811.RobotCode2015.Robot;
import org.usfirst.frc811.RobotCode2015.RobotMap;

/**
 * have it for the distance needed between each tote in auto mode 
 */
public class  drive_auto extends Command implements Config {
	private double error;
	private double distance;
    public drive_auto(int inches) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);
        distance = inches;
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	/*distance = -400000;
    	RobotMap.drivedrive_encoder.reset();
    	setTimeout(20);
    	*/
        RobotMap.drivedrive_encoder.setDistancePerPulse(1/14.5);

    	setTimeout(5);
      	
  	   	RobotMap.pid = new PIDController(1, .3, 3, new PIDSource() { public double pidGet() {
  	   	SmartDashboard.putNumber("Auto value", RobotMap.drivedrive_encoder.getDistance());
  	   		return RobotMap.drivedrive_encoder.getDistance();
   		}},
   		new PIDOutput() { public void pidWrite(double d) {
   			RobotMap.driveRobotDrive41.mecanumDrive_Cartesian(0, d, 0, 0);
   			SmartDashboard.putString("drive status", "in pidloop for driving");
  		}});
  	   	RobotMap.drivedrive_encoder.reset();
  	  	RobotMap.pid.setAbsoluteTolerance(1);
   		RobotMap.pid.setSetpoint(distance); //-17
   		RobotMap.pid.setOutputRange(-0.35, 0.35);
   		RobotMap.pid.setContinuous(false);
   		RobotMap.pid.enable();

   		SmartDashboard.putString("drive status", "drive forward auto");
   		
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Robot.drive.driveAuto();
    	/*error = (distance - RobotMap.drivedrive_encoder.getDistance());
    	RobotMap.driveRobotDrive41.mecanumDrive_Cartesian(0, -.5, 0, 0);
    	SmartDashboard.putNumber("Error", error);
    	*/
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return RobotMap.pid.onTarget() || isTimedOut();
    	
    //	return (//(error > DRIVE_END_COMMAND_DIFFERENCE_VALUE) || 
    //			isTimedOut());
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.driveRobotDrive41.mecanumDrive_Cartesian(0, 0, 0, 0);
    	RobotMap.pid.disable();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	RobotMap.driveRobotDrive41.mecanumDrive_Cartesian(0, 0, 0, 0);
    	RobotMap.pid.disable();
    }
}
