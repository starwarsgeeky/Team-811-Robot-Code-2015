// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robot builder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc811.RobotCode2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc811.RobotCode2015.Config;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap implements Config {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro driveGyro1;
    public static SpeedController drivefrontright;
    public static SpeedController drivefrontleft;
    public static SpeedController drivebackleft;
    public static SpeedController drivebackright;
    public static RobotDrive driveRobotDrive41;
    public static Encoder drivedrive_encoder;
    public static DigitalInput liftLimit_TopRight;
    public static DigitalInput liftLimit_BottomRight;
    public static DigitalInput liftLimit_TopLeft;
    public static DigitalInput liftLimit_BottomLeft;
    public static Encoder liftEncoder_Left;
    public static Encoder liftEncoder_Right;
    public static CANTalon liftTalon_Left;
    public static CANTalon liftTalon_Right;
    public static Compressor clawCompressor1;
    public static DoubleSolenoid clawDoubleSolenoid1;
    public static AnalogPotentiometer armPotentiometer;
    public static CANTalon armarm_talon;
    //public static DigitalInput liftBack_Trigger;
    public static PIDController pid;
    
    public static Joystick joystick1;
    public static Joystick joystick2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveGyro1 = new Gyro(GYRO_CHANNEL);
        LiveWindow.addSensor("Drive", "Gyro 1", driveGyro1);
        driveGyro1.setSensitivity(0.007);
        
        drivefrontright = new Talon(FRONT_RIGHT_PORT);
        LiveWindow.addActuator("Drive", "frontright", (Talon) drivefrontright);
        
        drivefrontleft = new Talon(FRONT_LEFT_PORT);
        LiveWindow.addActuator("Drive", "frontleft", (Talon) drivefrontleft);
        
        drivebackleft = new Talon(REAR_LEFT_PORT);
        LiveWindow.addActuator("Drive", "backleft", (Talon) drivebackleft);
        
        drivebackright = new Talon(REAR_RIGHT_PORT);
        LiveWindow.addActuator("Drive", "backright", (Talon) drivebackright);
        
        driveRobotDrive41 = new RobotDrive(drivefrontleft, drivebackleft,
              drivefrontright, drivebackright);
        driveRobotDrive41.setSafetyEnabled(false);
        driveRobotDrive41.setExpiration(ROBOT_DRIVE_EXPIRATION);
        driveRobotDrive41.setSensitivity(ROBOT_DRIVE_SENSITIVITY);
        driveRobotDrive41.setMaxOutput(ROBOT_DRIVE_MAX_OUTPUT);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        drivedrive_encoder = new Encoder(DRIVE_ENCODER_PORT_1, DRIVE_ENCODER_PORT_2, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "drive_encoder", drivedrive_encoder);
        drivedrive_encoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        RobotMap.drivedrive_encoder.setDistancePerPulse(1/14.5); //14.5 was raw of distance per inch so set this so that it would count ticks in inches
        RobotMap.drivedrive_encoder.setReverseDirection(true);
        
        liftTalon_Left = new CANTalon(LIFT_LEFT_TALON_PORT);
        
        liftTalon_Right = new CANTalon(LIFT_RIGHT_TALON_PORT);
        
        clawCompressor1 = new Compressor(COMPRESSOR_PORT);
        
        clawDoubleSolenoid1 = new DoubleSolenoid(CLAW_OPEN_CHANNEL, CLAW_CLOSE_CHANNEL);
        LiveWindow.addActuator("Claw", "Double Solenoid 1", clawDoubleSolenoid1);
        
        armarm_talon = new CANTalon(ARM_TALON_PORT);
        
        joystick1 = new Joystick(0);
        joystick2 = new Joystick(1);
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        
    }
}


