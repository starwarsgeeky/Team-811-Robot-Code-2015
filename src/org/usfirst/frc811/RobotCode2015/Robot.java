// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc811.RobotCode2015;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc811.RobotCode2015.commands.*;
import org.usfirst.frc811.RobotCode2015.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Lift lift;
    public static Claw claw;
    public static Arm arm;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        lift = new Lift();
        claw = new Claw();
        arm = new Arm();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        	//autonomousCommand = new AutonomousCommand();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Just drive", new drive_auto());
        autoChooser.addObject("Three Totes", new ThreeToteAuto());
        autoChooser.addObject("Two Totes", new TwoToteAuto());
        autoChooser.addObject("One Tote", new OneToteAuto());
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        //if (autonomousCommand != null) autonomousCommand.start();
    	Robot.lift.encoderReset();
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        //smart dashboard inputs here
        SmartDashboard.putNumber("pot value", RobotMap.armarm_talon.get());
        SmartDashboard.putData("claw value", (Sendable) RobotMap.clawDoubleSolenoid1.get());
        SmartDashboard.putNumber("gyro value", RobotMap.driveGyro1.getAngle());        
        SmartDashboard.putNumber("auto encoder value", RobotMap.drivedrive_encoder.getDistance());
        SmartDashboard.putNumber("lift left talon value", RobotMap.liftTalon_Left.get());
    	SmartDashboard.putNumber("lift right talon value", RobotMap.liftTalon_Right.get());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        RobotMap.liftTalon_Right.changeControlMode(CANTalon.ControlMode.PercentVbus);
        RobotMap.liftTalon_Left.changeControlMode(CANTalon.ControlMode.PercentVbus);
        RobotMap.liftTalon_Right.set(0.2);
        RobotMap.liftTalon_Left.set(0.2);
        
        SmartDashboard.putNumber("pot value", RobotMap.armarm_talon.get());
        SmartDashboard.putData("claw value", (Sendable) RobotMap.clawDoubleSolenoid1.get());
        SmartDashboard.putNumber("gyro value", RobotMap.driveGyro1.getAngle());        
        SmartDashboard.putNumber("auto encoder value", RobotMap.drivedrive_encoder.getDistance());
        SmartDashboard.putNumber("lift left talon value", RobotMap.liftTalon_Left.get());
    	SmartDashboard.putNumber("lift right talon value", RobotMap.liftTalon_Right.get());
    	
    }
}
